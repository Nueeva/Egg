{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-05-23T12:00:00+07:00",
    "name": "Nueva Developer Pro v2",
    "author": "admin@nueva.my.id",
    "description": "Nueva Developer Node.js Panel with Multi-Version Support and Enhanced Stability\r\n\r\nThis advanced panel is built with Ubuntu 22.04 and offers comprehensive support for modern Node.js versions (18-22) to provide maximum flexibility and performance for your applications. The panel is powered by PM2, a robust process manager that ensures your applications run with high stability, automatic restarts, and real-time monitoring capabilities.\r\n\r\nFeatures:\r\n• Multiple Node.js versions (18, 20, 22) available with seamless switching\r\n• Advanced system monitoring with beautiful system information display\r\n• Full development environment with essential tools pre-installed\r\n• Support for npm, yarn, and pnpm package managers\r\n• Enhanced security and performance optimizations\r\n• Beautiful UI with color-coded information display\r\n• Auto-update functionality from Git repositories\r\n• Comprehensive error handling and logging\r\n• Health checks and process monitoring\r\n• Support for private repositories with authentication\r\n• Quick deployment and easy configuration\r\n• Single unified Docker image from GitHub repository\r\n\r\nDocker Image: ghcr.io/nueeva/egg:main\r\nRepository: https://github.com/nueeva/egg\r\n\r\nIdeal for web applications, APIs, Discord bots, WhatsApp bots, Telegram bots, microservices, and any Node.js project requiring a stable and flexible runtime environment with professional-grade monitoring.",
    "features": [
        "nodejs",
        "pm2",
        "nvm",
        "git",
        "github-integration"
    ],
    "docker_images": {
        "Nueva Developer (Main)": "ghcr.io/nueeva/egg:main"
    },
    "file_denylist": [
        ".env",
        ".git/*",
        "node_modules/*"
    ],
    "startup": "{{STARTUP_CMD}}",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": [\r\n        \"Server started successfully\",\r\n        \"PM2 process manager active\",\r\n        \"Application is running\",\r\n        \"Application started successfully!\"\r\n    ]\r\n}",
        "logs": "{}",
        "stop": "pm2 stop all && pm2 delete all"
    },
    "scripts": {
        "installation": {
            "script": "#!/bin/bash\r\n# Nueva Developer Panel Installation Script\r\n# Repository: https://github.com/nueeva/egg\r\n# Docker Image: ghcr.io/nueeva/egg:main\r\n#\r\n# Server Files: /mnt/server\r\n\r\nset -e\r\n\r\necho \"=== Nueva Developer Panel Installation Started ===\"\r\necho \"Using Docker image: ghcr.io/nueeva/egg:main\"\r\necho \"Repository: https://github.com/nueeva/egg\"\r\n\r\n# Update system packages\r\necho \"Updating system packages...\"\r\napt update && apt upgrade -y\r\n\r\n# Install essential tools\r\necho \"Installing essential development tools...\"\r\napt install -y git curl jq file unzip make gcc g++ python3 python3-dev python3-pip libtool build-essential pkg-config\r\n\r\n# Update npm to latest version\r\necho \"Updating npm to latest version...\"\r\nnpm install npm@latest -g\r\n\r\n# Install PM2 globally\r\necho \"Installing PM2 process manager...\"\r\nnpm install pm2@latest -g\r\n\r\n# Create and navigate to server directory\r\necho \"Setting up server directory...\"\r\nmkdir -p /mnt/server\r\ncd /mnt/server\r\n\r\n# Handle user upload mode\r\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n    echo \"User upload mode enabled. Skipping Git operations.\"\r\n    echo \"Files will be uploaded manually by user.\"\r\n    exit 0\r\nfi\r\n\r\n# Git repository handling\r\nif [ ! -z \"${GIT_ADDRESS}\" ]; then\r\n    echo \"Processing Git repository: ${GIT_ADDRESS}\"\r\n    \r\n    # Add .git extension if not present\r\n    if [[ ${GIT_ADDRESS} != *.git ]]; then\r\n        GIT_ADDRESS=${GIT_ADDRESS}.git\r\n    fi\r\n\r\n    # Handle authentication\r\n    if [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n        echo \"Using anonymous Git access\"\r\n    else\r\n        echo \"Using authenticated Git access\"\r\n        GIT_ADDRESS=\"https://${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d/ -f3-)\"\r\n    fi\r\n\r\n    # Clone or update repository\r\n    if [ \"$(ls -A /mnt/server)\" ]; then\r\n        echo \"Directory not empty. Checking for existing repository...\"\r\n        if [ -d .git ]; then\r\n            echo \"Git repository found.\"\r\n            if [ -f .git/config ]; then\r\n                echo \"Loading Git configuration...\"\r\n                ORIGIN=$(git config --get remote.origin.url)\r\n                if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n                    echo \"Updating from repository...\"\r\n                    git pull\r\n                else\r\n                    echo \"Repository URL mismatch. Skipping update to prevent data loss.\"\r\n                fi\r\n            else\r\n                echo \"Invalid Git configuration. Exiting to prevent data loss.\"\r\n                exit 10\r\n            fi\r\n        else\r\n            echo \"No Git repository in non-empty directory. Exiting to prevent data loss.\"\r\n            exit 11\r\n        fi\r\n    else\r\n        echo \"Cloning repository...\"\r\n        if [ -z ${BRANCH} ]; then\r\n            echo \"Cloning default branch\"\r\n            git clone ${GIT_ADDRESS} .\r\n        else\r\n            echo \"Cloning branch: ${BRANCH}\"\r\n            git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n        fi\r\n    fi\r\nelse\r\n    echo \"No Git repository specified. Using existing files.\"\r\nfi\r\n\r\n# Install additional Node.js packages\r\necho \"Installing Node.js packages...\"\r\nif [[ ! -z ${NODE_PACKAGES} ]]; then\r\n    echo \"Installing additional packages: ${NODE_PACKAGES}\"\r\n    npm install ${NODE_PACKAGES}\r\nfi\r\n\r\n# Install dependencies from package.json\r\nif [ -f /mnt/server/package.json ]; then\r\n    echo \"Installing dependencies from package.json...\"\r\n    npm install --production\r\n    echo \"Dependencies installed successfully.\"\r\nelse\r\n    echo \"No package.json found. Skipping dependency installation.\"\r\nfi\r\n\r\n# Set proper permissions\r\necho \"Setting file permissions...\"\r\nchown -R container:container /mnt/server\r\nchmod -R 755 /mnt/server\r\n\r\n# Create basic package.json if none exists\r\nif [ ! -f /mnt/server/package.json ] && [ \"${USER_UPLOAD}\" != \"1\" ]; then\r\n    echo \"Creating basic package.json...\"\r\n    cat > /mnt/server/package.json << 'EOF'\r\n{\r\n  \"name\": \"nueva-app\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"Nueva Developer Panel Application\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"start\": \"node index.js\",\r\n    \"dev\": \"nodemon index.js\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=18.0.0\"\r\n  },\r\n  \"dependencies\": {},\r\n  \"devDependencies\": {}\r\n}\r\nEOF\r\nfi\r\n\r\necho \"=== Installation completed successfully ===\"\r\necho \"Docker Image: ghcr.io/nueeva/egg:main\"\r\necho \"Repository: https://github.com/nueeva/egg\"\r\nexit 0",
            "container": "ghcr.io/nueeva/egg:main",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Startup Command",
            "description": "Enter your startup command (e.g., 'node index.js', 'npm start', 'pm2 start index.js')",
            "env_variable": "STARTUP_CMD",
            "default_value": "node index.js",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:200",
            "field_type": "text"
        },
        {
            "name": "Git Repository URL",
            "description": "Git repository URL to clone (e.g., https://github.com/username/repo). Leave empty if using uploaded files.",
            "env_variable": "GIT_ADDRESS",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Branch",
            "description": "Branch to clone (leave empty for default branch)",
            "env_variable": "BRANCH",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Use Uploaded Files",
            "description": "Set to 1 to use uploaded files instead of Git repository",
            "env_variable": "USER_UPLOAD",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|in:0,1",
            "field_type": "text"
        },
        {
            "name": "Auto Update",
            "description": "Enable automatic Git updates on restart (1 = enabled, 0 = disabled)",
            "env_variable": "AUTO_UPDATE",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|in:0,1",
            "field_type": "text"
        },
        {
            "name": "Node.js Version",
            "description": "Node.js version to use (18, 20, 22, or leave empty for default)",
            "env_variable": "NODE_VERSION",
            "default_value": "20",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|in:,18,20,22",
            "field_type": "text"
        },
        {
            "name": "Additional NPM Packages",
            "description": "Extra npm packages to install (space-separated)",
            "env_variable": "NODE_PACKAGES",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:500",
            "field_type": "text"
        },
        {
            "name": "Git Username",
            "description": "Git username for private repositories",
            "env_variable": "USERNAME",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:100",
            "field_type": "text"
        },
        {
            "name": "Git Access Token",
            "description": "Git access token for private repositories",
            "env_variable": "ACCESS_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": false,
            "rules": "nullable|string|max:500",
            "field_type": "text"
        },
        {
            "name": "Environment Mode",
            "description": "NODE_ENV environment variable",
            "env_variable": "NODE_ENV",
            "default_value": "production",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|in:development,production,test",
            "field_type": "text"
        }
    ]
}